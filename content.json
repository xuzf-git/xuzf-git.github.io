{"meta":{"title":"xuzf","subtitle":"Student","description":"","author":"xuzf","url":"https://xuzf-git.github.io","root":"/"},"pages":[{"title":"所有分类","date":"2020-03-06T04:23:13.531Z","updated":"2020-03-06T04:23:13.531Z","comments":true,"path":"categories/index.html","permalink":"https://xuzf-git.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-03-06T04:24:30.101Z","updated":"2020-03-06T04:24:30.101Z","comments":true,"path":"friends/index.html","permalink":"https://xuzf-git.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"关于","date":"2020-03-06T04:22:57.829Z","updated":"2020-03-06T04:22:57.829Z","comments":true,"path":"about/index.html","permalink":"https://xuzf-git.github.io/about/index.html","excerpt":"","text":"xuzf学生 爱折腾"},{"title":"所有标签","date":"2020-03-06T04:23:28.344Z","updated":"2020-03-06T04:23:28.344Z","comments":true,"path":"tags/index.html","permalink":"https://xuzf-git.github.io/tags/index.html","excerpt":"","text":""},{"title":"404 Not Found","date":"2020-03-06T04:26:28.752Z","updated":"2020-03-06T04:26:28.752Z","comments":true,"path":"404.html","permalink":"https://xuzf-git.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"}],"posts":[{"title":"Windows更新git——443错误","slug":"Windows更新git——443错误","date":"2020-03-01T16:07:37.000Z","updated":"2020-03-06T03:42:34.725Z","comments":true,"path":"posts/64606.html","link":"","permalink":"https://xuzf-git.github.io/posts/64606.html","excerpt":"最近Windows系统总是在通知栏提醒我 git 需要更新，不胜其烦……","text":"最近Windows系统总是在通知栏提醒我 git 需要更新，不胜其烦…… 1、更新Git更新 git 很简单，只需要打开 cmd，输入： # 如果git是2.17.1以前的版本，使用下一行的命令 git update # 如果git是2.17.1以后版本，采用以下命令 git update-git-for-windows 或许会有如下报错： curl: (35) OpenSSL SSL_connect: SSL_ERROR_ZERO_RETURN in connection to github-production-release-asset-2e65be.s3.amazonaws.com: 443 出现443的错误，以及下载速度奇慢无比。于是估计是由于GFW的原因，一般修改git的网络代理即可。 2、解决git-443错误查询当前代理: git config --global http.proxy 修改代理，设置git使用SSR代理服务器： # 端口号不同，一般为1080 git config --global http.proxy &quot;127.0.0.1:端口号&quot; 修改代理后，再次尝试 git update-git-for-windows ，成功更新 git. 取消代理： #避免以后git总是使用代理， git config --global --unset http.proxy","categories":[{"name":"git","slug":"git","permalink":"https://xuzf-git.github.io/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://xuzf-git.github.io/tags/git/"}]},{"title":"Python-1:安装Anaconda & conda指令入门","slug":"Python入门：1-安装Anaconda-conda指令入门","date":"2020-02-11T01:53:48.000Z","updated":"2020-03-06T04:13:00.326Z","comments":true,"path":"posts/55263.html","link":"","permalink":"https://xuzf-git.github.io/posts/55263.html","excerpt":"了解Python，安装Anaconda，学习conda指令","text":"了解Python，安装Anaconda，学习conda指令 一、Python简介​ Python是一种解释型语言，支持Windows，Linux，Mac平台。Python功能强大，有丰富的第三方库，能够提供各种应用场景的支持。 关于Python版本，存在 Python2.x 和 Python3.x。官方说法：2020年1月1日，Python2将停止更新和维护。因此建议学习使用Python3。 Python 的优势： Python是一门高级语言，所谓“高级”：是指抽象程度上比C等语言更高级。因此Python更接近人类思维，更容易上手。 Python有良好的生态，丰富的第三方库，将Python武装成能应对Web开发、网络安全、游戏开发、网络爬虫、数据处理、机器学习等领域的全能型语言。 Python是胶水语言，能够粘合本不兼容的代码，如：Cpython、Jython. Python的劣势： Python的性能劣势，不够底层，不如C快。但是经过优化，Python的速度在某些情况下，不弱于C Python是动态语言，大型程序难以维护、修改重构。动态一时爽，事后火葬场。。。 二、Python安装 大一时安装Python的惨像，已使我目不忍视了；失败报错，尤使我耳不忍闻。我还有什么话可说呢？ ​ 想要在自己的系统中运行Python就需要安装Python解释器，就像运行C语言需要 gcc 编译器一样。可以选择下载Python安装，但我更建议安装Anaconda。Wiki百科介绍如下： Anaconda是一个免费开源的Python和R语言的发行版本，用于计算科学（数据科学、机器学习、大数据处理和预测分析，Anaconda致力于简化包管理和部署。Anaconda的包使用软件包管理系统Conda进行管理。超过1200万人使用Anaconda发行版本，并且Anaconda拥有超过1400个适用于Windows、Linux和MacOS的数据科学软件包 ​ 简单来说Anaconda提供了1mol的扩展包，以及一个非常好用的管理这些包的工具conda。也就是Python是简约线条，而Anaconda是极致色彩。 ​ Python第三方的模块库很多，之间的依赖关系复杂，需要一个工具来管理这些包。主流包管理工具有pip和conda两种，conda功能相对完善，因此推荐conda。 Windows10安装Anaconda 下载Anaconda，推荐清华镜像源。 下载最新版本的Anaconda，注意64位系统选择x86_64版本，如图： 一路 next 或者 I agree ，直到出现下图： 建议更改默认路径，因为之后安装多个虚拟环境后，Anaconda会占较大的存储空间。我这里更改为D:\\Anaconda。 在下一个界面，勾选两个选项： 第一个选项：添加Anaconda到系统环境变量。目的是：在系统的任何位置打开命令终端都能够运行Python，这为我们以后配置Python的开发环境如SublimeText3，Vs Code 提供很大的便利。 第二个选项：设置Anaconda为默认的Python解释器。 之后一路next or install 就可以了，安装完成后再Windows开始菜单里会出现下图所示的快捷方式： 第一个是Anaconda的一个管理界面 第二、三个是Anaconda的两个命令行工具 第四个是Jupyter notebook，一个基于Web的笔记本式交互开发环境，支持Markdown，非常适合学习使用。 第六个是Spyder一个轻量级的文本式开发环境（没咋用过。。。） 验证Python是否安装成功 按下win + R，在窗口中输入cmd 在cmd命令行中输入 python 如果出现以下内容，则安装正确 Python 3.7.6 | packaged by conda-forge | (default, Jan 7 2020, 21:48:41) [MSC v.1916 64 bit (AMD64)] on win32 Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt; 如果出现以下内容，则安装有误 &#39;python&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。 如果有误建议重启系统，再次尝试验证。如果仍然错误，建议检查是否已经添加Anaconda到系统环境变量： Linux安装Anaconda 下载Anaconda，同上。得到Anaconda-x.x.x-Linux-x86_64.sh文件 打开终端，cd 到下载路径：输入以下命令： bash Anaconda-x.x.x-Linux-x86_64.sh # 注意换成自己下载的对应文件名 之后一路Enter，如果遇到选择就输入yes. 完成后，重启终端，输入： python 如果得到以下内容，说明Anaconda安装正确。 Python 3.7.4 (default, Aug 13 2019, 20:35:49) [GCC 7.3.0] :: Anaconda, Inc. on linux Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt; 三、Anaconda配置及conda指令1. 添加国内镜像源利用conda安装很多packages时，会发现下载很慢，这是因为Anaconda的服务器在国外，为了提高下载速度，可以添加国内的镜像源。 Windows打开Anaconda Prompt，输入以下命令： # 添加Anaconda的TUNA镜像 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ # 需要pytorch的话，添加pytorch镜像 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ # 设置搜索时显示通道地址 conda config --set show_channel_urls yes Linux 修改 ~/.condarc文件 vi ~/.condarc 添加以下内容 channels: - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/ - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - defaults show_channel_urls: true 输入:wq，保存退出。 2.删除镜像源# 恢复成默认下载源 conda config --remove-key channels 3. Anaconda升级conda update conda conda update anaconda 4. Anaconda 卸载Windows依次执行以下步骤 打开Anaconda Prompt，输入以下命令，删除所有配置文件和目录 # 安装anaconda-clean conda install anaconda-clean # 运行anaconda-clean anaconda-clean --yes 手动删除anaconda安装目录下的 envs和pkgs文件夹 在控制面板中，卸载anaconda程序 Linux打开命令行，输入以下命令，删除所有配置文件和应用程序 # 安装anaconda-clean conda install anaconda-clean # 运行anaconda-clean anaconda-clean --yes # 删除程序 rm -rf ~/anaconda3 5.conda 包管理指令 指令 作用 codna list 列出所有已安装的包 conda install package_name 安装软件包及其依赖项 conda remove package_name 卸载包 conda update/upgrade –all 更新环境中所有已安装的包 conda info 显示当前conda环境的基本信息 conda help 显示conda指令的帮助命令 conda create 创建虚拟环境 conda -V 显示conda 版本信息 6. conda 环境管理指令 指令 作用 conda create -n env_name python=x.x 创建名为env_name的虚拟环境 conda activate env_name 进入env_name环境 conda deactivate 离开环境，回到base环境 conda env list 列出环境 conda env remove -n env_name 删除env_name环境 conda env export &gt; environment.yaml 将环境导出为YAML文件 conda env create -f environment.yaml 加载环境 四、结语 路漫漫其修远兮，吾将上下而求索。","categories":[{"name":"Python","slug":"Python","permalink":"https://xuzf-git.github.io/categories/Python/"}],"tags":[{"name":"Pyhon","slug":"Pyhon","permalink":"https://xuzf-git.github.io/tags/Pyhon/"},{"name":"conda","slug":"conda","permalink":"https://xuzf-git.github.io/tags/conda/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-02-06T16:00:00.000Z","updated":"2020-03-06T03:48:15.902Z","comments":true,"path":"posts/16107.html","link":"","permalink":"https://xuzf-git.github.io/posts/16107.html","excerpt":"分享一首小诗，希望我们能永远乐观","text":"分享一首小诗，希望我们能永远乐观 if by life you were deceivedby—alexander puskinif by life you were deceived,假如生活欺骗了你 don’t be dismal, don’t be wild!不要悲伤，不要心急 in the day of grief, be mild忧郁的日子里需要镇静 merry days will come, believe.相信吧 快乐的日子即将来临 heart is living in tomorrow;心儿永远向往着未来 present is dejected here;现在却常是忧郁 in a moment, passes sorrow;一切都是瞬息，一切都将过去 that which passes will be dear.而那过去了的，就会成为亲切的回忆","categories":[{"name":"essay","slug":"essay","permalink":"https://xuzf-git.github.io/categories/essay/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://xuzf-git.github.io/tags/%E9%9A%8F%E7%AC%94/"}],"author":"xuzf"}]}